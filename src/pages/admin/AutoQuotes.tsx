import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Search, Filter, Eye, CheckCircle, XCircle, Clock, RefreshCw, FileText } from 'lucide-react';
import { useAdminAutoQuotes } from '@/hooks/useAdminAutoQuotes';
import { AutoQuoteCard } from '@/components/admin/auto-quote/AutoQuoteCard';
import { AutoQuoteDetailDialog } from '@/components/admin/auto-quote/AutoQuoteDetailDialog';

type FilterType = 'all' | 'pending' | 'approved' | 'rejected';

export default function AutoQuotes() {
  const [filter, setFilter] = useState<FilterType>('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedQuote, setSelectedQuote] = useState<any>(null);
  const [showDetailDialog, setShowDetailDialog] = useState(false);

  const {
    quotes,
    isLoading,
    error,
    approveQuote,
    rejectQuote,
    refreshQuotes
  } = useAdminAutoQuotes();

  const filteredQuotes = quotes?.filter(quote => {
    const matchesFilter = filter === 'all' || quote.status === filter;
    const matchesSearch = !searchTerm || 
      quote.productName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      quote.userEmail?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      quote.id?.toLowerCase().includes(searchTerm.toLowerCase());
    
    return matchesFilter && matchesSearch;
  }) || [];

  const stats = {
    total: quotes?.length || 0,
    pending: quotes?.filter(q => q.status === 'pending').length || 0,
    approved: quotes?.filter(q => q.status === 'approved').length || 0,
    rejected: quotes?.filter(q => q.status === 'rejected').length || 0,
  };

  const handleViewDetails = (quote: any) => {
    setSelectedQuote(quote);
    setShowDetailDialog(true);
  };

  const handleApprove = async (quoteId: string) => {
    await approveQuote(quoteId);
    refreshQuotes();
  };

  const handleReject = async (quoteId: string) => {
    await rejectQuote(quoteId);
    refreshQuotes();
  };

  if (error) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-6xl mx-auto">
          <Card className="border-red-200 bg-red-50">
            <CardContent className="pt-6">
              <p className="text-red-800">Error loading auto quotes: {error}</p>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-6xl mx-auto space-y-6">
        {/* Header */}
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold">Auto Quotes</h1>
            <p className="text-muted-foreground">
              Manage instant quotes generated by the auto quote system
            </p>
          </div>
          <Button onClick={refreshQuotes} disabled={isLoading}>
            <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
            Refresh
          </Button>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Total</p>
                  <p className="text-2xl font-bold">{stats.total}</p>
                </div>
                <FileText className="h-8 w-8 text-muted-foreground" />
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Pending</p>
                  <p className="text-2xl font-bold text-yellow-600">{stats.pending}</p>
                </div>
                <Clock className="h-8 w-8 text-yellow-600" />
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Approved</p>
                  <p className="text-2xl font-bold text-green-600">{stats.approved}</p>
                </div>
                <CheckCircle className="h-8 w-8 text-green-600" />
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Rejected</p>
                  <p className="text-2xl font-bold text-red-600">{stats.rejected}</p>
                </div>
                <XCircle className="h-8 w-8 text-red-600" />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Filters and Search */}
        <Card>
          <CardContent className="pt-6">
            <div className="flex flex-col sm:flex-row gap-4">
              <div className="flex-1">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
                  <Input
                    placeholder="Search by product name, email, or quote ID..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10"
                  />
                </div>
              </div>
              
              <div className="flex gap-2">
                <Select value={filter} onValueChange={(value: FilterType) => setFilter(value)}>
                  <SelectTrigger className="w-[180px]">
                    <Filter className="h-4 w-4 mr-2" />
                    <SelectValue placeholder="Filter by status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Quotes</SelectItem>
                    <SelectItem value="pending">Pending Review</SelectItem>
                    <SelectItem value="approved">Approved</SelectItem>
                    <SelectItem value="rejected">Rejected</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Quotes List */}
        <div className="space-y-4">
          {isLoading ? (
            <div className="flex justify-center py-8">
              <RefreshCw className="h-8 w-8 animate-spin text-muted-foreground" />
            </div>
          ) : filteredQuotes.length === 0 ? (
            <Card>
              <CardContent className="pt-6 text-center">
                <p className="text-muted-foreground">
                  {searchTerm || filter !== 'all' 
                    ? 'No quotes match your filters' 
                    : 'No auto quotes found'
                  }
                </p>
              </CardContent>
            </Card>
          ) : (
            filteredQuotes.map((quote) => (
              <AutoQuoteCard
                key={quote.id}
                quote={quote}
                onViewDetails={() => handleViewDetails(quote)}
                onApprove={() => handleApprove(quote.id)}
                onReject={() => handleReject(quote.id)}
              />
            ))
          )}
        </div>

        {/* Detail Dialog */}
        {selectedQuote && (
          <AutoQuoteDetailDialog
            quote={selectedQuote}
            open={showDetailDialog}
            onOpenChange={setShowDetailDialog}
            onApprove={() => {
              handleApprove(selectedQuote.id);
              setShowDetailDialog(false);
            }}
            onReject={() => {
              handleReject(selectedQuote.id);
              setShowDetailDialog(false);
            }}
          />
        )}
      </div>
    </div>
  );
} 