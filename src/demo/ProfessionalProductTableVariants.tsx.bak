import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { 
  ChevronDown, 
  ChevronRight, 
  Edit, 
  Copy, 
  MoreVertical,
  Package,
  DollarSign,
  Scale,
  FileText,
  Plus,
  X,
  Calculator,
  AlertCircle,
  Maximize2,
  TrendingUp,
  Zap,
  Layers,
  Globe,
  Check,
  ArrowRight,
  Info,
  Brain,
  Database,
  Bot,
  Settings,
  Receipt,
  ExternalLink,
  Hash,
  Trash2,
  Copy as CopyIcon,
  Star,
  Download,
  Link
} from 'lucide-react';
import { cn } from '@/lib/utils';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

// Sample data with comprehensive weight and tax options
const sampleProducts = [
  {
    id: 1,
    name: 'MacBook Pro 16"',
    url: 'https://apple.com/macbook-pro-16',
    price: 2400,
    quantity: 1,
    weight: 2.5,
    weightSource: 'customs', // customs, ml, ai, volumetric
    dimensions: { length: 35.57, width: 24.59, height: 1.68, unit: 'cm' },
    hsnCode: '8471',
    taxMethod: 'customs', // customs, hsn, country, manual
    valuationMethod: 'actual', // minimum, actual
    seller: 'Apple Store',
    imageUrl: 'https://store.storeimages.cdn-apple.com/4982/as-images.apple.com/is/mbp16-spacegray-select-202301?wid=200&hei=200',
    weightOptions: {
      customs: 2.5,   // Official customs weight
      ml: 2.42,       // ML prediction
      ai: 2.48,       // AI estimation
      volumetric: 2.95 // Calculated volumetric weight
    },
    taxOptions: {
      customs: { rate: 25, amount: 600, method: 'Customs Database' },
      hsn: { rate: 18, amount: 432, method: 'HSN 8471 - Computers' },
      country: { rate: 20, amount: 480, method: 'India Standard Rate' },
      manual: { rate: 28, amount: 672, method: 'Manual Override' }
    },
    valuationOptions: {
      minimum: 1800, // Minimum customs valuation
      actual: 2400   // Actual purchase price
    }
  },
  {
    id: 2,
    name: 'iPhone 15 Pro',
    url: 'https://apple.com/iphone-15-pro',
    price: 999,
    quantity: 2,
    weight: 0.187,
    weightSource: 'ml',
    dimensions: { length: 14.67, width: 7.09, height: 0.83, unit: 'cm' },
    hsnCode: '8517',
    taxMethod: 'hsn',
    valuationMethod: 'actual',
    seller: 'Apple Store',
    imageUrl: 'https://store.storeimages.cdn-apple.com/4982/as-images.apple.com/is/iphone-15-pro-naturaltitanium-select?wid=200&hei=200',
    weightOptions: {
      customs: 0.221,
      ml: 0.187,      // Best ML prediction
      ai: 0.195,
      volumetric: 0.173
    },
    taxOptions: {
      customs: { rate: 20, amount: 400, method: 'Customs Telecom Rate' },
      hsn: { rate: 20, amount: 400, method: 'HSN 8517 - Mobile Phones' },
      country: { rate: 18, amount: 360, method: 'India GST Rate' },
      manual: { rate: 22, amount: 440, method: 'Premium Device Rate' }
    },
    valuationOptions: {
      minimum: 750,
      actual: 999
    }
  },
  {
    id: 3,
    name: 'Sony WH-1000XM5',
    url: 'https://electronics.sony.com/wh-1000xm5',
    price: 399,
    quantity: 1,
    weight: 0.254,
    weightSource: 'ai',
    dimensions: { length: 25.4, width: 20.3, height: 8.9, unit: 'cm' },
    hsnCode: '8518',
    taxMethod: 'country',
    valuationMethod: 'minimum',
    seller: 'Sony Direct',
    imageUrl: 'https://m.media-amazon.com/images/I/31SKhfXerJL._SY445_SX342_QL70_FMwebp_.jpg',
    weightOptions: {
      customs: 0.275,
      ml: 0.248,
      ai: 0.254,      // Best AI prediction
      volumetric: 0.926
    },
    taxOptions: {
      customs: { rate: 15, amount: 60, method: 'Audio Equipment Standard' },
      hsn: { rate: 18, amount: 72, method: 'HSN 8518 - Audio Equipment' },
      country: { rate: 12, amount: 48, method: 'Nepal Standard Rate' },
      manual: { rate: 20, amount: 80, method: 'Premium Audio Rate' }
    },
    valuationOptions: {
      minimum: 320,  // Using minimum valuation
      actual: 399
    }
  }
];

const ProfessionalProductTableVariants = () => {
  const [selectedLayout, setSelectedLayout] = useState<'sleek' | 'modern' | 'executive' | 'minimal'>('sleek');
  const [products, setProducts] = useState(sampleProducts);
  const [expandedRows, setExpandedRows] = useState<number[]>([]);
  const [dimensionUnit, setDimensionUnit] = useState<'cm' | 'in'>('cm');
  const [editingField, setEditingField] = useState<{productId: number, field: string} | null>(null);
  const [tempValues, setTempValues] = useState<{[key: string]: any}>({});

  const toggleRowExpansion = (id: number) => {
    setExpandedRows(prev => 
      prev.includes(id) ? prev.filter(row => row !== id) : [...prev, id]
    );
  };

  const calculateVolumetricWeight = (dimensions: any, divisor = 5000) => {
    if (!dimensions) return null;
    const { length, width, height, unit } = dimensions;
    const multiplier = unit === 'in' ? 2.54 : 1;
    const volumeCm3 = length * width * height * multiplier * multiplier * multiplier;
    return volumeCm3 / divisor;
  };

  const updateProduct = (productId: number, field: string, value: any) => {
    setProducts(prev => prev.map(p => 
      p.id === productId ? { ...p, [field]: value } : p
    ));
  };

  const handleFieldSave = (productId: number, field: string, value: any) => {
    updateProduct(productId, field, value);
    setEditingField(null);
  };

  // Layout 1: Sleek Dashboard Style
  const SleekDashboardLayout = () => (
    <div className="w-full space-y-4">
      {products.map((product) => {
        const isExpanded = expandedRows.includes(product.id);
        
        return (
          <div key={product.id} className="group">
            {}
                  <div className="flex items-center gap-2">
                    <div className="flex items-center gap-1 text-xs text-gray-400">
                      <Edit className="h-3 w-3" />
                      <span>Click to edit</span>
                    </div>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="sm" className="h-8 w-8 p-0 opacity-0 group-hover:opacity-100 transition-opacity">
                          <MoreVertical className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end" className="w-48">
                        <DropdownMenuItem onClick={() => window.open(product.url, '_blank')}>
                          <ExternalLink className="h-4 w-4 mr-2" />
                          Open Product Page
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={() => navigator.clipboard.writeText(product.url)}>
                          <Link className="h-4 w-4 mr-2" />
                          Copy Product URL
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={() => {
                          const newProduct = { ...product, id: Date.now(), name: product.name + ' (Copy)' };
                          setProducts(prev => [...prev, newProduct]);
                        }}>
                          <CopyIcon className="h-4 w-4 mr-2" />
                          Duplicate Product
                        </DropdownMenuItem>
                        <DropdownMenuSeparator />
                        <DropdownMenuItem>
                          <Star className="h-4 w-4 mr-2" />
                          Add to Favorites
                        </DropdownMenuItem>
                        <DropdownMenuItem>
                          <Download className="h-4 w-4 mr-2" />
                          Export Details
                        </DropdownMenuItem>
                        <DropdownMenuSeparator />
                        <DropdownMenuItem 
                          onClick={() => setProducts(prev => prev.filter(p => p.id !== product.id))}
                          className="text-red-600"
                        >
                          <Trash2 className="h-4 w-4 mr-2" />
                          Remove Product
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>
                </div>
              </div>
              
        <div className="bg-gradient-to-r from-gray-900 to-gray-800 text-white px-6 py-3">
          <div className="grid grid-cols-12 gap-4 text-xs font-medium uppercase tracking-wider">
            <div className="col-span-5">Product Details</div>
            <div className="col-span-2 text-center">Financials</div>
            <div className="col-span-2 text-center">Logistics</div>
            <div className="col-span-2 text-center">Compliance</div>
            <div className="col-span-1 text-center">Actions</div>
          </div>
        </div>
        
        <div className="divide-y divide-gray-100">
          {products.map((product, index) => {
            const isExpanded = expandedRows.includes(product.id);
            const hasVolumetric = product.volumetricWeight && product.volumetricWeight > product.weight;
            
            return (
              <div key={product.id} className={cn(
                "transition-all",
                isExpanded && "bg-blue-50/30"
              )}>
                {}
                    <div className="col-span-1 text-center">
                      <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                        <MoreVertical className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </div>
                
                {/* Executive Expanded View */}
                {isExpanded && (
                  <div className="px-6 pb-4 border-t border-gray-100">
                    <div className="grid grid-cols-12 gap-4 mt-4">
                      <div className="col-span-12 bg-white rounded-lg border p-4">
                        <div className="grid grid-cols-4 gap-6">
                          {/* KPI Blocks */}
                          <div className="text-center p-4 bg-gray-50 rounded-lg">
                            <p className="text-xs text-gray-500 uppercase mb-1">Weight Status</p>
                            <p className="text-2xl font-bold text-gray-900">
                              {hasVolumetric ? product.volumetricWeight?.toFixed(1) : product.weight}
                            </p>
                            <p className="text-xs text-gray-600 mt-1">
                              {hasVolumetric ? 'Volumetric Weight' : 'Actual Weight'} (kg)
                            </p>
                          </div>
                          
                          <div className="text-center p-4 bg-blue-50 rounded-lg">
                            <p className="text-xs text-gray-500 uppercase mb-1">Tax Method</p>
                            <p className="text-2xl font-bold text-blue-900">
                              {product.taxMethod.toUpperCase()}
                            </p>
                            <p className="text-xs text-gray-600 mt-1">20% Customs Rate</p>
                          </div>
                          
                          <div className="text-center p-4 bg-green-50 rounded-lg">
                            <p className="text-xs text-gray-500 uppercase mb-1">Shipping Impact</p>
                            <p className="text-2xl font-bold text-green-900">+$25</p>
                            <p className="text-xs text-gray-600 mt-1">Additional Cost</p>
                          </div>
                          
                          <div className="p-4 bg-purple-50 rounded-lg">
                            <p className="text-xs text-gray-500 uppercase mb-2">Quick Actions</p>
                            <div className="space-y-2">
                              <Button variant="outline" size="sm" className="w-full justify-start">
                                <Edit className="h-3 w-3 mr-2" />
                                Edit Details
                              </Button>
                              <Button variant="outline" size="sm" className="w-full justify-start">
                                <Calculator className="h-3 w-3 mr-2" />
                                Recalculate
                              </Button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );

  // Layout 4: Minimal Focus Layout
  const MinimalFocusLayout = () => (
    <div className="w-full space-y-2">
      {products.map((product) => {
        const isExpanded = expandedRows.includes(product.id);
        const hasVolumetric = product.volumetricWeight && product.volumetricWeight > product.weight;
        
        return (
          <div key={product.id}>
            {/* Minimal Main Row */}
            <div 
              onClick={() => toggleRowExpansion(product.id)}
              className={cn(
                "px-4 py-3 rounded-lg cursor-pointer transition-all",
                isExpanded 
                  ? "bg-gray-900 text-white" 
                  : "bg-white hover:bg-gray-50 border"
              )}
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <ArrowRight className={cn(
                    "h-4 w-4 transition-transform",
                    isExpanded && "rotate-90"
                  )} />
                  <div>
                    <span className="font-medium">{product.name}</span>
                    <span className={cn(
                      "mx-3",
                      isExpanded ? "text-gray-400" : "text-gray-300"
                    )}>—</span>
                    <span className={cn(
                      isExpanded ? "text-gray-300" : "text-gray-600"
                    )}>
                      ${(product.price * product.quantity).toLocaleString()}
                    </span>
                  </div>
                </div>
                
                <div className="flex items-center gap-6">
                  <span className={cn(
                    "text-sm",
                    isExpanded ? "text-gray-300" : "text-gray-600"
                  )}>
                    {product.weight} kg
                    {hasVolumetric && " *"}
                  </span>
                  <span className={cn(
                    "text-sm font-mono",
                    isExpanded ? "text-gray-300" : "text-gray-600"
                  )}>
                    {product.hsnCode}
                  </span>
                </div>
              </div>
            </div>
            
            {/* Minimal Expanded View */}
            {isExpanded && (
              <div className="mt-2 ml-8 p-4 bg-gray-50 rounded-lg">
                <div className="flex items-start justify-between">
                  <div className="space-y-3 flex-1">
                    <div>
                      <p className="text-xs text-gray-500 uppercase tracking-wider mb-1">Weight Analysis</p>
                      <div className="flex items-center gap-4">
                        <span className="text-sm">Actual: {product.weight} kg</span>
                        {product.volumetricWeight && (
                          <>
                            <span className="text-gray-300">•</span>
                            <span className="text-sm">
                              Volumetric: {product.volumetricWeight.toFixed(2)} kg
                            </span>
                          </>
                        )}
                        {hasVolumetric && (
                          <>
                            <span className="text-gray-300">•</span>
                            <span className="text-sm font-medium text-orange-600">Using Volumetric</span>
                          </>
                        )}
                      </div>
                    </div>
                    
                    <div>
                      <p className="text-xs text-gray-500 uppercase tracking-wider mb-1">Dimensions</p>
                      <div className="flex items-center gap-2">
                        <Input placeholder="Length" className="h-8 w-24" defaultValue={product.dimensions?.length} />
                        <Input placeholder="Width" className="h-8 w-24" defaultValue={product.dimensions?.width} />
                        <Input placeholder="Height" className="h-8 w-24" defaultValue={product.dimensions?.height} />
                        <span className="text-sm text-gray-500">{dimensionUnit}</span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="ml-8">
                    <Button variant="outline" size="sm">
                      Update
                    </Button>
                  </div>
                </div>
              </div>
            )}
          </div>
        );
      })}
    </div>
  );

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="mb-8">
        <h1 className="text-2xl font-bold text-gray-900 mb-2">Beautiful Expandable Row Designs</h1>
        <p className="text-gray-600">Four stunning variations of expandable product tables with volumetric weight support</p>
      </div>

      <Tabs value={selectedLayout} onValueChange={(v) => setSelectedLayout(v as any)}>
        <TabsList className="mb-6">
          <TabsTrigger value="sleek">Sleek Dashboard</TabsTrigger>
          <TabsTrigger value="modern">Modern Cards</TabsTrigger>
          <TabsTrigger value="executive">Executive Summary</TabsTrigger>
          <TabsTrigger value="minimal">Minimal Focus</TabsTrigger>
        </TabsList>

        <TabsContent value="sleek">
          <Card>
            <CardHeader>
              <CardTitle>Sleek Dashboard Style</CardTitle>
              <CardDescription>
                Clean metrics cards with visual indicators and gradient backgrounds
              </CardDescription>
            </CardHeader>
            <CardContent>
              <SleekDashboardLayout />
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="modern">
          <Card>
            <CardHeader>
              <CardTitle>Modern Card Stack</CardTitle>
              <CardDescription>
                Floating cards with animated elements and colorful accents
              </CardDescription>
            </CardHeader>
            <CardContent>
              <ModernCardStackLayout />
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="executive">
          <Card>
            <CardHeader>
              <CardTitle>Executive Summary Style</CardTitle>
              <CardDescription>
                Professional KPI-focused layout with clear data hierarchy
              </CardDescription>
            </CardHeader>
            <CardContent>
              <ExecutiveSummaryLayout />
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="minimal">
          <Card>
            <CardHeader>
              <CardTitle>Minimal Focus Layout</CardTitle>
              <CardDescription>
                Ultra-clean design with maximum focus on content
              </CardDescription>
            </CardHeader>
            <CardContent>
              <MinimalFocusLayout />
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default ProfessionalProductTableVariants;