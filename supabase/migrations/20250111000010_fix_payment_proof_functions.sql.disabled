-- Fix the get_orders_with_payment_proofs function to handle multiple payment proofs per order
-- This ensures we only get the latest payment proof for each order

DROP FUNCTION IF EXISTS get_orders_with_payment_proofs(TEXT, INTEGER);

CREATE OR REPLACE FUNCTION get_orders_with_payment_proofs(
  status_filter TEXT DEFAULT NULL,
  limit_count INTEGER DEFAULT 50
)
RETURNS TABLE (
  order_id UUID,
  order_display_id TEXT,
  final_total DECIMAL,
  final_currency TEXT,
  payment_status TEXT,
  payment_method TEXT,
  customer_email TEXT,
  customer_id UUID,
  message_id UUID,
  verification_status TEXT,
  admin_notes TEXT,
  verified_amount DECIMAL,
  attachment_file_name TEXT,
  attachment_url TEXT,
  submitted_at TIMESTAMP WITH TIME ZONE,
  verified_at TIMESTAMP WITH TIME ZONE
) AS $$
BEGIN
  RETURN QUERY
  WITH latest_payment_proofs AS (
    -- Get the latest payment proof for each quote
    SELECT DISTINCT ON (quote_id)
      id,
      quote_id,
      sender_id,
      verification_status,
      admin_notes,
      verified_amount,
      attachment_file_name,
      attachment_url,
      created_at,
      verified_at
    FROM messages
    WHERE message_type = 'payment_proof'
    ORDER BY quote_id, created_at DESC
  )
  SELECT 
    q.id as order_id,
    q.order_display_id,
    q.final_total,
    q.final_currency,
    q.payment_status,
    q.payment_method,
    auth_users.email as customer_email,
    q.user_id as customer_id,
    lpp.id as message_id,
    lpp.verification_status,
    lpp.admin_notes,
    lpp.verified_amount,
    lpp.attachment_file_name,
    lpp.attachment_url,
    lpp.created_at as submitted_at,
    lpp.verified_at
  FROM quotes q
  JOIN latest_payment_proofs lpp ON q.id = lpp.quote_id
  LEFT JOIN auth.users auth_users ON q.user_id = auth_users.id
  WHERE (status_filter IS NULL OR lpp.verification_status = status_filter)
  ORDER BY lpp.created_at DESC
  LIMIT limit_count;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Grant execute permission to authenticated users
GRANT EXECUTE ON FUNCTION get_orders_with_payment_proofs(TEXT, INTEGER) TO authenticated;

-- Also update the payment_proof_verification_summary view to handle multiple proofs
DROP VIEW IF EXISTS payment_proof_verification_summary;

CREATE OR REPLACE VIEW payment_proof_verification_summary AS
WITH latest_payment_proofs AS (
  -- Get the latest payment proof for each quote
  SELECT DISTINCT ON (quote_id)
    id,
    quote_id,
    sender_id,
    verification_status,
    admin_notes,
    verified_amount,
    verified_by,
    verified_at,
    attachment_file_name,
    attachment_url,
    created_at
  FROM messages
  WHERE message_type = 'payment_proof'
  ORDER BY quote_id, created_at DESC
)
SELECT 
  lpp.id as message_id,
  lpp.quote_id,
  lpp.sender_id,
  lpp.verification_status,
  lpp.admin_notes,
  lpp.verified_amount,
  lpp.verified_by,
  lpp.verified_at,
  lpp.attachment_file_name,
  lpp.attachment_url,
  lpp.created_at as submitted_at,
  q.order_display_id,
  q.final_total,
  q.final_currency,
  q.payment_status,
  q.payment_method,
  auth_users.email as customer_email,
  admin_auth.email as verified_by_email
FROM latest_payment_proofs lpp
JOIN quotes q ON lpp.quote_id = q.id
LEFT JOIN auth.users auth_users ON lpp.sender_id = auth_users.id
LEFT JOIN auth.users admin_auth ON lpp.verified_by = admin_auth.id
ORDER BY lpp.created_at DESC;

-- Grant access to the view
GRANT SELECT ON payment_proof_verification_summary TO authenticated;

-- Update the stats function to only count latest payment proofs per order
DROP FUNCTION IF EXISTS get_payment_proof_stats();

CREATE OR REPLACE FUNCTION get_payment_proof_stats()
RETURNS JSON AS $$
DECLARE
  result JSON;
BEGIN
  WITH latest_payment_proofs AS (
    -- Get the latest payment proof for each quote
    SELECT DISTINCT ON (quote_id)
      verification_status
    FROM messages
    WHERE message_type = 'payment_proof'
    ORDER BY quote_id, created_at DESC
  )
  SELECT json_build_object(
    'total', COUNT(*),
    'pending', COUNT(*) FILTER (WHERE verification_status = 'pending'),
    'verified', COUNT(*) FILTER (WHERE verification_status = 'verified'),
    'confirmed', COUNT(*) FILTER (WHERE verification_status = 'confirmed'),
    'rejected', COUNT(*) FILTER (WHERE verification_status = 'rejected')
  ) INTO result
  FROM latest_payment_proofs;
  
  RETURN result;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Grant execute permission to authenticated users
GRANT EXECUTE ON FUNCTION get_payment_proof_stats() TO authenticated;