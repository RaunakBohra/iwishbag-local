name: Email Queue Processing

# Process email queue every 5 minutes (critical for customer communication)
on:
  schedule:
    - cron: '*/5 * * * *'  # Every 5 minutes
  workflow_dispatch:  # Allow manual triggering

jobs:
  process-email-queue:
    runs-on: ubuntu-latest
    name: Process Email Queue
    
    steps:
      - name: Process Email Queue
        run: |
          echo "üîµ Processing email queue..."
          
          response=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST \
            "https://grgvlrvywsfmnmkxrecd.supabase.co/functions/v1/process-email-queue" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            -H "Content-Type: application/json")
          
          # Extract HTTP status code
          http_code=$(echo "$response" | grep "HTTP_CODE:" | cut -d: -f2)
          body=$(echo "$response" | sed '/HTTP_CODE:/d')
          
          echo "üìä Response Status: $http_code"
          echo "üìã Response Body: $body"
          
          if [ "$http_code" -eq 200 ]; then
            echo "‚úÖ Email queue processed successfully!"
          else
            echo "‚ùå Failed to process email queue (HTTP $http_code)"
            echo "Response: $body"
            exit 1
          fi

  # Payment Health Monitor - Every 15 minutes
  payment-health-monitor:
    runs-on: ubuntu-latest
    name: Payment Health Monitor
    if: github.event.schedule == '*/15 * * * *' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Monitor Payment Health
        run: |
          echo "üîµ Monitoring payment health..."
          
          response=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST \
            "https://grgvlrvywsfmnmkxrecd.supabase.co/functions/v1/payment-health-monitor" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            -H "Content-Type: application/json")
          
          # Extract HTTP status code
          http_code=$(echo "$response" | grep "HTTP_CODE:" | cut -d: -f2)
          body=$(echo "$response" | sed '/HTTP_CODE:/d')
          
          echo "üìä Response Status: $http_code"
          echo "üìã Response Body: $body"
          
          if [ "$http_code" -eq 200 ]; then
            echo "‚úÖ Payment health monitored successfully!"
          else
            echo "‚ùå Failed to monitor payment health (HTTP $http_code)"
            echo "Response: $body"
            exit 1
          fi

  # Expire Quotes - Every 30 minutes
  expire-quotes:
    runs-on: ubuntu-latest
    name: Expire Old Quotes
    if: github.event.schedule == '*/30 * * * *' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Expire Old Quotes
        run: |
          echo "üîµ Expiring old quotes..."
          
          response=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST \
            "https://grgvlrvywsfmnmkxrecd.supabase.co/functions/v1/expire-quotes" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            -H "Content-Type: application/json")
          
          # Extract HTTP status code
          http_code=$(echo "$response" | grep "HTTP_CODE:" | cut -d: -f2)
          body=$(echo "$response" | sed '/HTTP_CODE:/d')
          
          echo "üìä Response Status: $http_code"
          echo "üìã Response Body: $body"
          
          if [ "$http_code" -eq 200 ]; then
            echo "‚úÖ Quotes expired successfully!"
          else
            echo "‚ùå Failed to expire quotes (HTTP $http_code)"
            echo "Response: $body"
            exit 1
          fi

  # Process Refund Queue - Every 30 minutes
  process-refund-queue:
    runs-on: ubuntu-latest
    name: Process Refund Queue
    if: github.event.schedule == '*/30 * * * *' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Process Refund Queue
        run: |
          echo "üîµ Processing refund queue..."
          
          response=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST \
            "https://grgvlrvywsfmnmkxrecd.supabase.co/functions/v1/process-refund-queue" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            -H "Content-Type: application/json")
          
          # Extract HTTP status code
          http_code=$(echo "$response" | grep "HTTP_CODE:" | cut -d: -f2)
          body=$(echo "$response" | sed '/HTTP_CODE:/d')
          
          echo "üìä Response Status: $http_code"
          echo "üìã Response Body: $body"
          
          if [ "$http_code" -eq 200 ]; then
            echo "‚úÖ Refund queue processed successfully!"
          else
            echo "‚ùå Failed to process refund queue (HTTP $http_code)"
            echo "Response: $body"
            exit 1
          fi

  # Payment Recovery - Every 2 hours
  payment-recovery:
    runs-on: ubuntu-latest
    name: Payment Recovery
    if: github.event.schedule == '0 */2 * * *' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Send Payment Recovery Emails
        run: |
          echo "üîµ Sending payment recovery emails..."
          
          response=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST \
            "https://grgvlrvywsfmnmkxrecd.supabase.co/functions/v1/payment-recovery" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            -H "Content-Type: application/json")
          
          # Extract HTTP status code
          http_code=$(echo "$response" | grep "HTTP_CODE:" | cut -d: -f2)
          body=$(echo "$response" | sed '/HTTP_CODE:/d')
          
          echo "üìä Response Status: $http_code"
          echo "üìã Response Body: $body"
          
          if [ "$http_code" -eq 200 ]; then
            echo "‚úÖ Payment recovery emails sent successfully!"
          else
            echo "‚ùå Failed to send payment recovery emails (HTTP $http_code)"
            echo "Response: $body"
            exit 1
          fi

  # Summary job to show completion
  maintenance-summary:
    runs-on: ubuntu-latest
    name: Maintenance Summary
    if: always()
    needs: [process-email-queue, payment-health-monitor, expire-quotes, process-refund-queue, payment-recovery]
    
    steps:
      - name: Show Maintenance Summary
        run: |
          echo "üéâ Automated maintenance tasks completed!"
          echo "‚è∞ Next scheduled maintenance in progress..."
          echo "üìä Monitor results in GitHub Actions dashboard"