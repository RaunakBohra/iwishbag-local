{
  "permissions": {
    "allow": [
      "Bash(grep:*)",
      "Bash(npx supabase:*)",
      "Bash(curl:*)",
      "Bash(npm run typecheck:*)",
      "Bash(git checkout:*)",
      "Bash(npm run build:*)",
      "Bash(rg:*)",
      "Bash(rm:*)",
      "Bash(psql:*)",
      "Bash(npm run dev:*)",
      "Bash(git restore:*)",
      "Bash(node:*)",
      "Bash(supabase db:*)",
      "Bash(docker exec:*)",
      "Bash(git add:*)",
      "Bash(find:*)",
      "Bash(git push:*)",
      "Bash(git commit:*)",
      "Bash(cat:*)",
      "Bash(./update_country_code_references.sh:*)",
      "Bash(ls:*)",
      "Bash(docker logs:*)",
      "Bash(npm run lint:*)",
      "Bash(npx tsc:*)",
      "Bash(npm run:*)",
      "Bash(supabase projects:*)",
      "Bash(supabase functions logs:*)",
      "Bash(supabase functions serve:*)",
      "WebFetch(domain:docs.payu.com)",
      "Bash(mv:*)",
      "Bash(supabase migration repair:*)",
      "Bash(pkill:*)",
      "Bash(PGPASSWORD=aZenjDCQxwMifCEY psql:*)",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"\\d payment_ledger\")",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"\\df record_payment_with_ledger_and_triggers\")",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"\\dt\")",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"\n-- Test the complete payment workflow\n-- 1. Check if we can call the RPC function\nSELECT record_payment_with_ledger_and_triggers(\n    ''c0a80121-1234-4abc-8000-000000000001''::uuid,\n    100.50,\n    ''USD'',\n    ''bank_transfer'',\n    ''TEST-123'',\n    ''Test payment from local database check'',\n    ''00000000-0000-4000-8000-000000000001''::uuid\n);\n\")",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"\n-- Check what functions are available for the UnifiedPaymentModal\nSELECT routine_name, routine_definition \nFROM information_schema.routines \nWHERE routine_name LIKE ''%payment%'' \nAND routine_type = ''FUNCTION''\nAND routine_schema = ''public''\nORDER BY routine_name;\n\")",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"\n-- Check if the key functions that UnifiedPaymentModal depends on exist\nSELECT \n    routine_name,\n    array_agg(parameter_name || '' '' || data_type ORDER BY ordinal_position) as parameters\nFROM information_schema.routines r\nLEFT JOIN information_schema.parameters p ON r.specific_name = p.specific_name\nWHERE r.routine_name IN (\n    ''record_payment_with_ledger_and_triggers'',\n    ''confirm_payment_from_proof'', \n    ''get_orders_with_payment_proofs''\n)\nAND r.routine_schema = ''public''\nGROUP BY routine_name\nORDER BY routine_name;\n\")",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"\\dt financial_transactions\")",
      "Bash(supabase functions deploy:*)",
      "WebFetch(domain:docs.payu.in)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "WebFetch(domain:github.com)",
      "Bash(supabase functions:*)",
      "Bash(supabase logs:*)",
      "WebFetch(domain:developer.paypal.com)",
      "Bash(supabase status:*)",
      "Bash(npx tsx:*)",
      "Bash(npm install:*)",
      "Bash(sed:*)",
      "Bash(npm test)",
      "Bash(npm test:*)",
      "Bash(tsc --noEmit)",
      "Bash(npx eslint:*)",
      "Bash(awk:*)",
      "Bash(supabase migration:*)",
      "Bash(for file in test-paypal-config capture-paypal-payment setup-paypal-integration payu-token-manager payu-success payu-failure)",
      "Bash(do if [ -f \"$file/index.ts\" ])",
      "Bash(then echo \"=== $file ===\")",
      "Bash(fi)",
      "Bash(done)",
      "Bash(for migration in 20250716000008 20250716000009 20250716000010 20250716000011 20250716000012 20250716000013 20250716000014 20250716000015 20250716000016 20250716000017)",
      "Bash(do)",
      "Bash(echo:*)",
      "Bash(PGPASSWORD=\"Pass@321\" psql -h aws-0-ap-south-1.pooler.supabase.com -p 6543 -U postgres.scvoviqcqzlplrsdzukx -d postgres -c \"SELECT COUNT(*) FROM payment_reconciliation_logs;\")",
      "Bash(mkdir:*)",
      "Bash(stripe login:*)",
      "Bash(stripe trigger payment_intent.succeeded:*)",
      "Bash(stripe listen:*)",
      "Bash(stripe events:*)",
      "Bash(stripe webhook_endpoints:*)",
      "Bash(stripe webhook_endpoint_events list:*)",
      "Bash(npx vitest run:*)",
      "WebFetch(domain:www.airwallex.com)",
      "Bash(ngrok config:*)",
      "Bash(ngrok:*)",
      "WebFetch(domain:www.postman.com)",
      "Bash(supabase secrets set:*)",
      "Bash(supabase link:*)",
      "Bash(supabase start:*)",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"SET session_replication_role = ''replica''; \\i cloud_data.sql\")",
      "Bash(supabase stop:*)",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"SELECT count(*) as total_quotes FROM quotes; SELECT count(*) as total_users FROM profiles; SELECT count(*) as total_countries FROM country_settings; SELECT count(*) as total_customs FROM customs_categories; SELECT count(*) as total_templates FROM email_templates;\")",
      "Bash(true)",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"SELECT tgname, tgenabled FROM pg_trigger WHERE tgname = ''on_auth_user_created'';\")",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"SELECT tgname FROM pg_trigger WHERE tgrelid = ''auth.users''::regclass;\")",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"\\sf handle_new_user\")",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();\")",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"\nINSERT INTO public.profiles (id, full_name, email, phone, country, preferred_display_currency)\nVALUES (''d62f79bb-168b-467b-889e-a6208b11d0cf'', ''Raunak Bohra'', ''rnkbohra@gmail.com'', NULL, ''IN'', ''INR'')\nON CONFLICT (id) DO UPDATE SET\n  full_name = EXCLUDED.full_name,\n  email = EXCLUDED.email,\n  country = EXCLUDED.country,\n  preferred_display_currency = EXCLUDED.preferred_display_currency;\")",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"\\d profiles\")",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"\nINSERT INTO public.profiles (id, full_name, phone, country, preferred_display_currency)\nVALUES (''d62f79bb-168b-467b-889e-a6208b11d0cf'', ''Raunak Bohra'', NULL, ''IN'', ''INR'')\nON CONFLICT (id) DO UPDATE SET\n  full_name = EXCLUDED.full_name,\n  country = EXCLUDED.country,\n  preferred_display_currency = EXCLUDED.preferred_display_currency;\")",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"SELECT id, email FROM auth.users ORDER BY created_at DESC LIMIT 3;\")",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"\\d user_addresses\")",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -f supabase/migrations/20250712142000_drop_old_country_columns.sql)",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"\nALTER TABLE user_addresses ADD COLUMN IF NOT EXISTS phone TEXT;\nALTER TABLE user_addresses ADD COLUMN IF NOT EXISTS recipient_name TEXT;\nSELECT column_name FROM information_schema.columns WHERE table_name = ''user_addresses'' AND table_schema = ''public'' ORDER BY ordinal_position;\n\")",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"\\d quotes\")",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -f supabase/migrations/20250716120000_schema_verification_and_repair.sql)",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -f supabase/migrations/20250716000001_process_paypal_payment_atomic.sql)",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"SELECT * FROM schema_health_check;\")",
      "Bash(chmod:*)",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"\\d quote_items\")",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"SELECT column_name FROM information_schema.columns WHERE table_name = ''quotes'' AND column_name IN (''destination_country'', ''origin_country'', ''customer_name'', ''breakdown'') ORDER BY column_name;\")",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -f supabase/migrations/20250708000008_remove_item_currency_column.sql)",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"\n-- Test that we can insert into quote_items without item_currency\nINSERT INTO quote_items (\n  quote_id, \n  product_name, \n  product_url, \n  quantity,\n  item_price,\n  item_weight\n) VALUES (\n  gen_random_uuid(),\n  ''Test Product'',\n  ''https://example.com/product'',\n  1,\n  10.50,\n  0.5\n);\n-- Clean up the test\nDELETE FROM quote_items WHERE product_name = ''Test Product'';\nSELECT ''Quote items insertion test: SUCCESS'' as result;\n\")",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"SELECT column_name FROM information_schema.columns WHERE table_name = ''quote_items'' AND column_name = ''item_currency'';\")",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 54322 -U postgres -d postgres -c \"SELECT setting_key, setting_value FROM system_settings WHERE setting_key IN (''quote_statuses'', ''order_statuses'');\")",
      "Bash(PGPASSWORD:*)",
      "Bash(touch:*)",
      "Bash(supabase secrets list:*)",
      "Bash(open test-payu-local-integration.html)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(gh secret list:*)",
      "Bash(gh workflow run:*)",
      "WebFetch(domain:docs.khalti.com)",
      "Bash(supabase:*)",
      "WebFetch(domain:www.scribd.com)",
      "WebFetch(domain:developer.esewa.com.np)",
      "Bash(open:*)",
      "Bash(python3:*)",
      "Bash(npx prettier:*)",
      "Bash(npx lhci:*)",
      "Bash(./fix-database-schema.sh:*)",
      "Bash(vercel:*)",
      "Bash(for file in \"src/pages/auth/ResetPassword.tsx\" \"src/pages/PaymentFailure.tsx\" \"src/components/AddressHistory.tsx\" \"src/pages/About.tsx\" \"src/pages/auth/EmailConfirmation.tsx\")",
      "Bash(do echo \"=== $file ===\")",
      "mcp__ide__getDiagnostics",
      "mcp__ide__executeCode",
      "Bash(for file in Compact*.tsx)",
      "Bash(do echo \"=== $file exports ===\")",
      "Bash(/dev/null)",
      "WebFetch(domain:primer.style)",
      "WebFetch(domain:help.shopify.com)",
      "WebFetch(domain:polaris.shopify.com)",
      "WebFetch(domain:polaris-react.shopify.com)",
      "WebFetch(domain:www.nngroup.com)",
      "Bash(npx playwright install:*)",
      "Bash(npx storybook@latest init:*)",
      "Bash(git worktree:*)",
      "Bash(claude mcp add:*)",
      "Bash(claude mcp:*)",
      "WebFetch(domain:experienceleague.adobe.com)",
      "Bash(gh auth:*)",
      "Bash(gh repo view:*)",
      "Bash(gh repo list:*)",
      "Bash(gh issue list:*)",
      "Bash(gh pr list:*)",
      "Bash(gh workflow:*)",
      "Bash(gh api:*)",
      "Bash(pg_isready:*)",
      "Bash(npx playwright test:*)",
      "Bash(git clone:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(kill:*)",
      "Bash(npm:*)",
      "Bash(git stash push:*)",
      "WebFetch(domain:airbnb.com)",
      "Bash(for file in /Users/raunakbohra/Desktop/global-wishlist-hub/src/components/admin/smart-components/{CompactCalculationBreakdown,CompactHSNTaxBreakdown,CompactShippingOptions,CompactStatusManager,TaxCalculationSidebar}.tsx)",
      "Bash(for file in /Users/raunakbohra/Desktop/global-wishlist-hub/src/{components/forms/quote-form-fields/ProductInfoFields.tsx,services/CalculationDefaultsService.ts,utils/loadSampleHSNQuote.ts,stores/cartStore.ts})",
      "Bash(pipx install:*)",
      "Bash(export:*)",
      "Bash(graphiti compose:*)",
      "Bash(pipx uninstall:*)",
      "Bash(pip3 search:*)",
      "Bash(cp:*)",
      "Bash(graphiti up:*)",
      "Bash(docker compose:*)",
      "Bash(wrangler d1 list:*)",
      "Bash(wrangler whoami:*)",
      "Bash(wrangler kv:namespace:*)",
      "Bash(wrangler kv namespace:*)",
      "Bash(wrangler deployments:*)",
      "Bash(wrangler queues:*)",
      "Bash(wrangler pages project:*)",
      "Bash(wrangler r2 bucket:*)",
      "Bash(wrangler d1 create:*)",
      "Bash(wrangler deploy:*)",
      "Bash(wrangler kv key put:*)",
      "Bash(wrangler ai models:*)",
      "Bash(wrangler d1 execute:*)",
      "Bash(wrangler logout:*)",
      "Bash(wrangler login:*)",
      "Bash(git reset:*)",
      "Bash(npx wrangler deploy:*)",
      "Bash(npx wrangler dev:*)",
      "WebFetch(domain:docs.brightdata.com)",
      "Bash(deno check:*)",
      "Bash(pgrep:*)",
      "mcp__redis__list",
      "mcp__sequential-thinking__sequentialthinking",
      "mcp__memory__search_nodes",
      "mcp__redis__get",
      "mcp__memory__read_graph",
      "mcp__redis__get",
      "Bash(redis-cli:*)",
      "Bash(env)",
      "Bash(./fix-mcp-servers.sh:*)",
      "Bash(./check-mcp-health.sh:*)",
      "mcp__memory__create_entities",
      "Bash(npx:*)",
      "Bash(/Users/raunakbohra/Desktop/global-wishlist-hub/fix-mcp-connection.sh:*)",
      "Bash(/Users/raunakbohra/Desktop/global-wishlist-hub/setup-claude-auto-mcp.sh)",
      "mcp__memory__create_relations",
      "mcp__redis__set",
      "mcp__redis__set",
      "mcp__memory__add_observations",
      "Bash(docker volume:*)",
      "Bash(./cleanup-admin-quote.sh:*)",
      "Bash(/Users/raunakbohra/Desktop/global-wishlist-hub/src/services/HSNQuoteIntegrationService.ts )",
      "Bash(/Users/raunakbohra/Desktop/global-wishlist-hub/src/services/HSNDataMigrationService.ts )",
      "Bash(/Users/raunakbohra/Desktop/global-wishlist-hub/src/services/HSNTaxService.ts )",
      "Bash(/Users/raunakbohra/Desktop/global-wishlist-hub/src/services/EnhancedHSNSearchService.ts )",
      "Bash(/Users/raunakbohra/Desktop/global-wishlist-hub/src/services/HSNTaxIntegrationService.ts )",
      "Bash(/Users/raunakbohra/Desktop/global-wishlist-hub/src/services/__tests__/HSNQuoteIntegrationService.test.ts )",
      "Bash(/Users/raunakbohra/Desktop/global-wishlist-hub/src/services/HSNDataValidationService.ts)",
      "WebFetch(domain:blog.daraz.com.np)",
      "Bash(/Users/raunakbohra/Desktop/global-wishlist-hub/scripts/check-otp.sh:*)",
      "Bash(./test-ses-local.sh:*)",
      "Bash(aws s3 ls:*)",
      "Bash(brew install:*)",
      "Bash(./configure-aws-cli.sh)",
      "Bash(aws iam attach-user-policy:*)",
      "Bash(aws iam list-user-policies:*)",
      "Bash(aws ses:*)",
      "Bash(aws s3 mb:*)",
      "Bash(aws lambda list-functions:*)",
      "Bash(aws s3api put-bucket-policy:*)",
      "Bash(aws s3api get-bucket-policy:*)",
      "Bash(nslookup:*)",
      "Bash(./lambda/deploy-email-processor.sh:*)",
      "Bash(aws lambda:*)",
      "Bash(--function-name iwishbag-process-incoming-email )",
      "Bash(--statement-id AllowSESInvoke )",
      "Bash(--action lambda:InvokeFunction )",
      "Bash(--principal ses.amazonaws.com )",
      "Bash(--source-account 597088020156)",
      "Bash(./update-ses-receipt-rule.sh:*)",
      "Bash(aws logs tail:*)",
      "Bash(./update-lambda-env.sh)",
      "Bash(./check-lambda-logs.sh:*)",
      "Bash(zip:*)",
      "WebFetch(domain:docs.msg91.com)",
      "WebFetch(domain:msg91.com)",
      "Bash(./test-msg91.sh:*)",
      "Bash(./setup-local-email-testing.sh:*)",
      "WebFetch(domain:resend.com)",
      "WebFetch(domain:sendgrid.com)",
      "WebFetch(domain:docs.sendgrid.com)",
      "WebFetch(domain:www.twilio.com)",
      "Bash(aws s3 rm:*)",
      "Bash(aws s3 rb:*)",
      "Bash(aws iam list-roles:*)",
      "Bash(aws ec2 describe-instances:*)",
      "Bash(aws iam:*)",
      "Bash(aws sts get-caller-identity:*)",
      "WebFetch(domain:help.delhivery.com)",
      "WebFetch(domain:sharma-ramesh-ib.medium.com)",
      "WebFetch(domain:one.delhivery.com)",
      "Bash(for:*)",
      "WebFetch(domain:linear.app)",
      "WebFetch(domain:ui.shadcn.com)",
      "WebFetch(domain:www.navbar.gallery)",
      "WebFetch(domain:runcopycat.com)",
      "Bash(mcp:*)",
      "WebFetch(domain:www.npmjs.com)",
      "Bash(wrangler secret put:*)",
      "Bash(compgen:*)",
      "Bash(wrangler tail:*)",
      "WebFetch(domain:brightdata.com)",
      "Bash(--configuration-set-name \"iwishbag-transactional\" )",
      "Bash(--region ap-southeast-1)",
      "Bash(--configuration-set-name \"iwishbag-transactional\" )",
      "Bash(--configuration-set-name \"iwishbag-transactional\" )",
      "Bash(--configuration-set-name \"iwishbag-transactional\" )",
      "Bash(--event-destination-name \"cloudwatch-events\" )",
      "Bash(--event-destination '{\n    \"\"Enabled\"\": true,\n    \"\"MatchingEventTypes\"\": [\"\"send\"\", \"\"bounce\"\", \"\"complaint\"\", \"\"delivery\"\"],\n    \"\"CloudWatchDestination\"\": {\n      \"\"DimensionConfigurations\"\": [\n        {\n          \"\"DimensionName\"\": \"\"EmailAddress\"\",\n          \"\"DimensionValueSource\"\": \"\"messageTag\"\",\n          \"\"DefaultDimensionValue\"\": \"\"default\"\"\n        }\n      ]\n    }\n  }' )",
      "Bash(--configuration-set-name \"iwishbag-transactional\" )",
      "Bash(--event-destination-name \"cloudwatch-events\" )",
      "Bash(--event-destination '{\n    \"\"Enabled\"\": true,\n    \"\"MatchingEventTypes\"\": [\"\"send\"\", \"\"bounce\"\", \"\"complaint\"\", \"\"delivery\"\"],\n    \"\"CloudWatchDestination\"\": {\n      \"\"DimensionConfigurations\"\": [\n        {\n          \"\"DimensionName\"\": \"\"EmailAddress\"\",\n          \"\"DimensionValueSource\"\": \"\"messageTag\"\",\n          \"\"DefaultDimensionValue\"\": \"\"default\"\"\n        }\n      ]\n    }\n  }' )",
      "Bash(--configuration-set-name \"iwishbag-transactional\" )",
      "Bash(--event-destination-name \"cloudwatch-events\" )",
      "Bash(--event-destination '{\n    \"\"Enabled\"\": true,\n    \"\"MatchingEventTypes\"\": [\"\"SEND\"\", \"\"BOUNCE\"\", \"\"COMPLAINT\"\", \"\"DELIVERY\"\"],\n    \"\"CloudWatchDestination\"\": {\n      \"\"DimensionConfigurations\"\": [\n        {\n          \"\"DimensionName\"\": \"\"EmailAddress\"\",\n          \"\"DimensionValueSource\"\": \"\"MESSAGE_TAG\"\",\n          \"\"DefaultDimensionValue\"\": \"\"default\"\"\n        }\n      ]\n    }\n  }' )",
      "Bash(--configuration-set-name \"iwishbag-transactional\" )",
      "Bash(--reputation-metrics-enabled )",
      "Bash(--configuration-set-name \"iwishbag-transactional\" )",
      "Bash(--custom-redirect-domain \"iwishbag.store\" )",
      "Bash(--configuration-set-name \"iwishbag-transactional\" )",
      "Bash(--configuration-set-name \"iwishbag-transactional\" )",
      "Bash(--suppressed-reasons \"BOUNCE\" \"COMPLAINT\" )",
      "Bash(wrangler pages deploy:*)",
      "Bash(aws s3 sync:*)",
      "Bash(aws s3api put-bucket-website:*)",
      "Bash(aws cloudfront create-distribution:*)",
      "Bash(aws s3api put-public-access-block:*)",
      "Bash(aws s3api get-bucket-website:*)",
      "Bash(wrangler pages domain add:*)",
      "Bash(aws configure:*)",
      "Bash(aws cloudfront:*)",
      "Bash(dig:*)"
    ],
    "deny": []
  }
}